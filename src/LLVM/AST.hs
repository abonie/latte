module LLVM.AST where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Module = Module [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef
    = FunDef Type Ident [Arg] [Instr]
    | FunDec Type Ident [Arg]
    | ConstDef Ident Type Operand
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Type Ident
  deriving (Eq, Ord, Show, Read)

data Instr
    = Ret Type Operand
    | VRet
    | Br Operand
    | Cbr Operand Operand Operand
    | Bin Ident Binop Type Operand Operand
    | Phi Ident Type Operand Ident Operand Ident
    | Call Ident Type Ident [Carg]
    | Cmp Ident Cmpop Type Operand Operand
    | Bitcast Ident Type Ident Type
    | Label Ident
  deriving (Eq, Ord, Show, Read)

data Carg = Carg Type Operand
  deriving (Eq, Ord, Show, Read)

data Binop = Add | Sub | Mul | Div
  deriving (Eq, Ord, Show, Read)

data Cmpop = Eq | Ne | Gt | Ge | Lt | Le
  deriving (Eq, Ord, Show, Read)

data Operand = Reg Ident | LitInt Integer | LitStr String
  deriving (Eq, Ord, Show, Read)

data Type
    = I32
    | I8
    | I1
    | Void
    | Array Int Type
    | Ptr Type
  deriving (Eq, Ord, Show, Read)

